// ===================================================
// Constructor Helper - use only inside Constructors
// ===================================================

// Define the global API Map, otherwise
// the Components throw an error because there
// need a outer API Map for Merging
$api: ();

/// Get Data from a API Map
///
/// @group core-constructor
///
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Keys to fetch
///
/// @return {*}
@function v($map, $keys...) {
  @return map-deep-get($map, $keys...);
}

/// Build the Prefix for Constructor Classes
///
/// @group core-constructor
///
/// @param {map} $map - API Map
///
/// @return {*}
@function ct($map) {
  @return if(v($map,type) == 'silent', '%', '.');
}

/// Integrate Comments in a Constructor with a check
///
/// @group core-constructor
///
/// @param {map} $map - API Map
///
/// @content
@mixin c-comment($map) {
  @if v($map,type) != 'silent' {
    @at-root {
      @content
    }
  }
}

/// Store Styles in a Pseudo Container.
/// Use only inside bundled Components
///
/// @group core-constructor
///
/// @param {string} $name - Storage Name
///
/// @content
///
/// @example scss - scss
///   .box {
///     $api: (
///       selector: 'box'
///     );
///
///     @include store(storage) {
///       height: 200px;
///       width: 50px;
///     }
///   }
@mixin store($name) {
  @at-root %#{v($api,selector)}#{$name} {
    @content;
  }
}

/// Unload Styles from a Pseudo Container.
/// Use only inside bundled Components
///
/// @group core-constructor
///
/// @param {string} $name - Storage Name
///
/// @example scss - scss
///   .box {
///     .child {
///       @include yield(storage);
///     }
///   }
///
/// @example css - css
///   .box .child {
///     height: 200px;
///     width: 50px;
///   }
@mixin yield($name) {
  @extend %#{v($api,selector)}#{$name};
}
