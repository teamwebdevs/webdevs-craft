// ===================================================
// Color Methods
// ===================================================

/// Mixin to get Color Values from the Color Map
///
/// @group methods-color
///
/// @access private
///
/// @param  {string} $target                 - Color Keyword
/// @param  {string} $attrib [color]         - Color Attribute
/// @param  {bool}   $imp [false]            - For !important
/// @param  {map}    $map [$kittn-color-map] - Color Map
@mixin _color($target, $attrib: color, $imp: false, $map: $kittn-color-map) {

  // Check if '$target' is in the Map
  @if map-has-key($map,$target) {
    // Put the Data in a own map
    $colors : map-get($map,$target);

    // Check if the Color have an opacity value
    // Generate RGBA Colors with an IE8 Fallback (hex)
    @if map-get($colors,opacity) != false {

      // Generate the IE8 Fallback Colors
      @include jacket(old) {
        #{$attrib}: map-get($colors,color) if($imp, !important, null);
      }

      // Generate RGBA Colors
      @include jacket(modern) {
        #{$attrib}: rgba(map-get($colors,color),map-get($colors,opacity)) if($imp, !important, null);
      }

    // Otherwise use Hex Colors
    } @else {
      #{$attrib}: map-get($colors,color) if($imp, !important, null);
    }

  } @else {
    @warn 'The Color "#{$target}" are not available in the Color Map! Possible Colorkeys: "#{map-keys($map)}"';
  }
}

/// Use the desired Color Value from the Map an build a Color Value
///
/// @group methods-color
///
/// @param  {string} $target       - Color Keyword
/// @param  {bool}   $hard [false] - For !important
///
/// @example scss - scss
///   .color-1 {
///     @include get-c('primary');
///   }
///   .color-2 {
///     @include get-c('primary', true);
///   }
///
/// @example css - css
///   .color-1 {
///     color: #f29300;
///   }
///   .color-2 {
///     color: #f29300 !important;
///   }
@mixin get-c($target, $hard: false) {
  @include _color($target, $attrib: color, $imp: $hard);
}

/// Use the desired Color Value from the Map an build a Background-Color Value
///
/// @group methods-color
///
/// @param  {string} $target       - Color Keyword
/// @param  {bool}   $hard [false] - For !important
///
/// @example scss - scss
///   .background {
///     @include get-bc('alert');
///   }
///
/// @example css - css
///   .background {
///     background-color: #ef462a;
///   }
@mixin get-bc($target, $hard: false) {
  @include _color($target, $attrib: background-color, $imp: $hard);
}

/// Extend the Element with existing Color Classes
///
/// @group methods-color
///
/// @param  {string} $name - Name from the Color Selector
///
/// @example scss - scss
///   %c--alert {
///     @include get-c('alert');
///   }
///   .important-text {
///     @include ext-c('alert');
///   }
///   .alert-text {
///     @include ext-c('alert');
///   }
///
/// @example css - css
///   .important-text, .alert-text {
///     color: #ef462a;
///   }
@mixin ext-c($name) {
  @extend %c#{map-get($kittn-bem, modifier)}#{$name};
}

/// Extend the Element with existing Background-Color Classes
///
/// @group methods-color
///
/// @param  {string} $name - Name from the Color Selector
///
/// @example scss - scss
///   %bc--primary {
///     @include get-bc('primary');
///   }
///   .button {
///     @include ext-bc('primary');
///   }
///
/// @example css - css
///   .button {
///     background-color: #f29300;
///   }
@mixin ext-bc($name) {
  @extend %bc#{map-get($kittn-bem, modifier)}#{$name};
}
