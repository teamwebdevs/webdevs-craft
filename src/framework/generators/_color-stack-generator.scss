// ===================================================
// Color Stack Generator
// ===================================================

/// Generate Stack off individual Colors
///
/// @group generators
///
/// @require {function} color-stack
///
/// @param  {map}    $o                              - Setup Vars
/// @param  {list}   $o.color [#000 #000]            - Color Values
/// @param  {list}   $o.stacks [30 60 90]            - Individual steps between the color mix
/// @param  {*}      $o.attribute [background-color] - Attribute
/// @param  {bool}   $o.extend [false]               - For extending the classes with other Classes
@mixin color-stack-generator($o: ()) {
  // Default Setup
  $o: map-merge((
    color: #000 #fff,
    stacks: 30 60 90,
    attribute: background-color,
    extend: false
  ), $o);

  // Mixin need minimum two stack values
  @if length(map-get($o, stacks)) > 1 {

    // Build a Color List
    $cs: color-stack(map-get($o,color), map-get($o,stacks));

    // Generate the Classes
    @for $i from 1 through (length($cs)) {

      &#{map-get($kittn-bem, modifier)}#{$i - 1} {
        // Include the Attribute
        #{map-get($o, attribute)}: nth($cs,$i);

        // When the Classes need to be Extended
        @if map-get($o, extend) {
          @extend #{map-get($o, extend)};
        }
      }
    }
  } @else {
    @warn 'The Color-Stack need more the one stack value.';
  }
}
