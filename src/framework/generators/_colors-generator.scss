// ===================================================
// Color Generator
// ===================================================

/// Generate Color Classes (or Silent) with all Colors from the Color Map.
///
/// @group generators
///
/// @access private
///
/// @param {map}    $colors [$kittn-color-map] - Map with Colors
@mixin colorgenerator($colors: $kittn-color-map) {
  // Mixin check
  @if mixin_exists(_color) {
/*
  Colors

  Styleguide 1.6
*/
    // Add Counter
    $counter: 1;

    @each $value, $entry in $colors {
      // Move the Counter Up to count the Loop
      $counter: $counter + 1;
/*
  #{$value}

  Colorvalue #{c($value)}

  markup:
  <div class="sg-body" style="border-radius: 200px; height: 200px; width: 200px; background-color:#{c($value)}; box-shadow: 0 0 10px rgba(0,0,0,0.2);"></div>

  sg-wrapper:
  <div class="sg-body">
    <sg-wrapper-content/>
  </div>

  Styleguide 1.6.#{$counter}
*/
      // Build Placeholder Classes
      %c#{map-get($kittn-bem, modifier)}#{$value} {
        @include _color($value,color);
      }
      %bc#{map-get($kittn-bem, modifier)}#{$value} {
        @include _color($value,background-color);
      }

      // Set Class for Text Color
      @if map-get($entry,type) == c {
        .c#{map-get($kittn-bem, modifier)}#{$value} {
          @extend %c#{map-get($kittn-bem, modifier)}#{$value};
        }
      }

      // Set Class for Background-Color
      @if map-get($entry,type) == b {
        .bc#{map-get($kittn-bem, modifier)}#{$value} {
          @extend %bc#{map-get($kittn-bem, modifier)}#{$value};
        }
      }

      // Set two Classes for Text & Background-Color
      @if map-get($entry,type) == bc {
        .c#{map-get($kittn-bem, modifier)}#{$value} {
          @extend %c#{map-get($kittn-bem, modifier)}#{$value};
        }
        .bc#{map-get($kittn-bem, modifier)}#{$value} {
          @extend %bc#{map-get($kittn-bem, modifier)}#{$value};
        }
      }
    }
  } @else {
    @warn "_color Mixin dosen't exists!"
  }
}
